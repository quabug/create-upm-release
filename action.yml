name: 'Create a Release of Unity Package ready for OpenUPM.com'
description: 'Create a release for a tag in your repository which is ready for publish on OpenUPM.com'
author: 'GitHub'
inputs:
  draft:
    description: '`true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`'
    required: false
    default: 'false'
  prerelease:
    description: '`true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`'
    required: false
    default: 'false'
  target:
    description: 'Target branch or full commit SHA (default: main branch)'
    required: false
    default: 'main'
  upm_tag_prefix:
    description: 'Tag prefix of verional tag'
    required: true
    default: ''
  upm_package_path:
    description: 'Path of unity package which should contain a package.json file.'
    required: true
    default: ''
  create_unitypackage:
    description: '`true` to create an unitypackage from `upm_package_path` and attach it into release'
    required: false
    default: 'false'
  unitypackage_name:
    required: false
    description: 'prefix name of created unity package'
outputs:
  release_url:
    description: 'The URL users can navigate to in order to view the release'
runs:
  using: "composite"
  steps:
    - name: Get Tag
      id: get-tag
      run: echo "result=${{ inputs.upm_tag_prefix }}`jq -r '.version' ${{ inputs.upm_package_path }}/package.json`" >> $GITHUB_OUTPUT
      shell: bash
    - name: Check Release Existence
      id: has-release
      run: echo "result=`gh release view ${{ steps.get-tag.outputs.result }} 1> /dev/null 2> /dev/null && echo true || echo false`" >> $GITHUB_OUTPUT
      shell: bash
    - name: Create UnityPackage
      if: ${{ inputs.create_unitypackage == 'true' && steps.has-release.outputs.result == 'false' }}
      uses: quabug/unity-pack@v1
      with:
        package-dir: ${{ inputs.upm_package_path }}
    - name: Create Release
      if: ${{ steps.has-release.outputs.result == 'false' }}
      run: |
        export draft_option=`[ ${{ inputs.draft }} = 'true' ] && echo '-b'`
        export prerelease_option=`[ ${{ inputs.prerelease }} = 'true' ] && echo '-p'`
        export tag=${{ steps.get-tag.outputs.result }}
        export unitypackage=`[ ${{ inputs.create_unitypackage }} = 'true' ] && echo ${{ inputs.unitypackage_name }}-${tag//\//\-}.unitypackage`
        mv output.unitypackage $unitypackage 2> /dev/null
        export release_url=`gh release create $tag -t $tag -n "" --target ${{ inputs.target }} $draft_option $prerelase_option $unitypackage`
        echo "release_url=$(echo $release_url)" >> $GITHUB_OUTPUT
      shell: bash
branding:
  icon: 'tag'
  color: 'gray-dark'
